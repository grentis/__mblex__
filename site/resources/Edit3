CREATE OR REPLACE PACKAGE BODY WEBCMS."PRODUCT" AS


PROCEDURE IN__PRODUCTSERIEISCHANGED(in_OID IN NUMBER) AS
BEGIN
    update PRODUCTSERIE set 
         PRODUCTSERIE.SOMETHINGCHANGED = ISCHANGED_PRODUCTSERIE (in_OID)
    where PRODUCTSERIE.OID = in_OID;
EXCEPTION when others then
    null;
END IN__PRODUCTSERIEISCHANGED;


PROCEDURE IN__PRODUCTMODELISCHANGED(in_OID IN NUMBER) AS
BEGIN
    update PRODUCTMODEL set 
         PRODUCTMODEL.SOMETHINGCHANGED = ISCHANGED_PRODUCTMODEL (in_OID)
    where PRODUCTMODEL.OID = in_OID;
    for series in (select * from PRODUCTMODEL_PRODUCTSERIE where PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID = in_OID) loop
        IN__PRODUCTSERIEISCHANGED(series.PRODUCTSERIE_OID);
    end loop;
EXCEPTION when others then
    null;
END IN__PRODUCTMODELISCHANGED;


PROCEDURE CLONEPRODUCTGROUP(in_OID IN NUMBER, in_toClabOID IN NUMBER, in_withCommit IN NUMBER, in_workSessionOID IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    FROM_PRODUCTGROUP PRODUCTGROUP%ROWTYPE;

    TEMP_OID INTEGER(10);
BEGIN
    out_OID := null;
    out_status := 0;
    
     select * into FROM_PRODUCTGROUP from PRODUCTGROUP where PRODUCTGROUP.OID = in_OID;
     
    select PRODUCTGROUP_SEQ.NEXTVAL into out_OID FROM dual;
    INSERT INTO WEBCMS.PRODUCTGROUP (
       OID, STATUS, NAME, 
       POSITION, DESCRIPTION, HASMSSOFTWARE, 
       ISACCESSORY, CLAB_OID, 
       MASTER_PRODUCTGROUP_OID, WORKSESSION_OID, ISMASTER, 
       MASTERNAME, ONLINEDATE, OFFLINEDATE) 
    VALUES ( 
        out_OID, 2, FROM_PRODUCTGROUP.NAME,
        FROM_PRODUCTGROUP.POSITION, FROM_PRODUCTGROUP.DESCRIPTION, FROM_PRODUCTGROUP.HASMSSOFTWARE,
        FROM_PRODUCTGROUP.ISACCESSORY, in_toClabOID,
        FROM_PRODUCTGROUP.OID, in_workSessionOID, 0,
        FROM_PRODUCTGROUP.MASTERNAME, FROM_PRODUCTGROUP.ONLINEDATE, FROM_PRODUCTGROUP.OFFLINEDATE
    );
    
    for filters in (select * from PRODUCTGROUP_PRODUCTFILTER where PRODUCTGROUP_PRODUCTFILTER.PRODUCTGROUP_OID = FROM_PRODUCTGROUP.OID) loop
        BEGIN
            INSERT INTO WEBCMS.PRODUCTGROUP_PRODUCTFILTER VALUES (
                out_OID, GET_LOCALFILTER(filters.PRODUCTFILTER_OID, in_toClabOID)
            );
        EXCEPTION WHEN others THEN
            INSERT INTO WEBCMS.PRODUCTGROUP_PRODUCTFILTER VALUES (
                 out_OID, filters.PRODUCTFILTER_OID
            );        
        END;
    end loop;
    
    for taglines in (select * from PRODUCTGROUP_PRODUCTTAGLINE where PRODUCTGROUP_PRODUCTTAGLINE.PRODUCTGROUP_OID = FROM_PRODUCTGROUP.OID) loop
        INSERT INTO WEBCMS.PRODUCTGROUP_PRODUCTTAGLINE VALUES (
            out_OID, taglines.PRODUCTTAGLINE_OID
        );
    end loop;
    
     for resources in (select * from PRODUCTGROUP_RESOURCE where PRODUCTGROUP_RESOURCE.PRODUCTGROUP_OID = FROM_PRODUCTGROUP.OID) loop
        INSERT INTO WEBCMS.PRODUCTGROUP_RESOURCE VALUES (
            out_OID, resources.RESOURCE_OID
        );
    end loop;
    
    for prices in (select * from PRODUCTGROUPPRICE where PRODUCTGROUPPRICE.PRODUCTGROUP_OID = FROM_PRODUCTGROUP.OID) loop
        INSERT INTO WEBCMS.PRODUCTGROUPPRICE VALUES (
            out_OID, prices.DISPLAYPRICE
        );
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END CLONEPRODUCTGROUP;


PROCEDURE CLONEPRODUCTLINE(in_OID IN NUMBER, in_toClabOID IN NUMBER, in_withCommit IN NUMBER, in_workSessionOID IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    FROM_PRODUCTLINE PRODUCTLINE%ROWTYPE;
    
    LOCAL_PRODUCTGROUPOID INTEGER(10);
    TEMP_OID INTEGER(10);
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    
     select * into FROM_PRODUCTLINE from PRODUCTLINE where PRODUCTLINE.OID = in_OID;
     
    LOCAL_PRODUCTGROUPOID := GET_LOCALPRODUCTGROUP(FROM_PRODUCTLINE.PRODUCTGROUP_OID, in_toCLABOID);
    if(LOCAL_PRODUCTGROUPOID is null) then
        CLONEPRODUCTGROUP(FROM_PRODUCTLINE.PRODUCTGROUP_OID, in_toCLABOID, 0, in_workSessionOID, LOCAL_PRODUCTGROUPOID, TEMP_OID);
        if (LOCAL_PRODUCTGROUPOID is null) then
            RAISE MYEXCEPTION;
        end if;
    end if;
    
    select PRODUCTLINE_SEQ.NEXTVAL into out_OID FROM dual;
    
    INSERT INTO WEBCMS.PRODUCTLINE (
       OID, STATUS, NAME, 
       POSITION, DESCRIPTION, PRODUCTGROUP_OID, 
       MASTER_PRODUCTLINE_OID, WORKSESSION_OID, MASTERNAME, 
       ONLINEDATE, OFFLINEDATE) 
    VALUES ( 
        out_OID, 2, FROM_PRODUCTLINE.NAME,
        FROM_PRODUCTLINE.POSITION, FROM_PRODUCTLINE.DESCRIPTION, LOCAL_PRODUCTGROUPOID,
        FROM_PRODUCTLINE.OID, in_workSessionOID, FROM_PRODUCTLINE.MASTERNAME,
        FROM_PRODUCTLINE.ONLINEDATE, FROM_PRODUCTLINE.OFFLINEDATE
    );
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END CLONEPRODUCTLINE;


PROCEDURE COPYPRODUCTSERIE(in_OID IN NUMBER, in_withCommit IN NUMBER, in_workSessionOID IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PS PRODUCTSERIE%ROWTYPE;
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PS from PRODUCTSERIE where PRODUCTSERIE.OID = in_OID;
    select PRODUCTSERIE_SEQ.NEXTVAL into out_OID from DUAL;
    
    INSERT INTO WEBCMS.PRODUCTSERIE (
        OID, STATUS, POSITION, 
        NAME, DESCRIPTION, HASMSSOFTWARE, 
        STOREURL, PRODUCTLINE_OID, MASTER_PRODUCTSERIE_OID, 
        WORKSESSION_OID, LASTVERSION, ISMASTER, 
        SOMETHINGCHANGED, ORIGINAL_PRODUCTSERIE_OID, FOOTNOTES, 
        MASTERNAME, ONLINEDATE, OFFLINEDATE, 
        SMALLDESCRIPTION, PROJECTCODE, WARRANTY) 
    VALUES ( 
        out_OID, 3, CURRENT_PS.POSITION,
        CURRENT_PS.NAME, CURRENT_PS.DESCRIPTION, CURRENT_PS.HASMSSOFTWARE,
        CURRENT_PS.STOREURL, CURRENT_PS.PRODUCTLINE_OID, CURRENT_PS.MASTER_PRODUCTSERIE_OID,
        in_workSessionOID, 1, CURRENT_PS.ISMASTER, 
        1, CURRENT_PS.OID, CURRENT_PS.FOOTNOTES,
        CURRENT_PS.MASTERNAME, CURRENT_PS.ONLINEDATE, CURRENT_PS.OFFLINEDATE,
        CURRENT_PS.SMALLDESCRIPTION, CURRENT_PS.PROJECTCODE, CURRENT_PS.WARRANTY); 
        
    for benefits in (select * from PRODUCTBENEFIT join PRODUCTSERIE_PRODUCTBENEFIT on 
                                PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = CURRENT_PS.OID
                                and PRODUCTBENEFIT.OID = PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID) loop
        insert into PRODUCTSERIE_PRODUCTBENEFIT values (
               out_OID, benefits.PRODUCTBENEFIT_OID
        );                
    end loop;
    for models in (select * from PRODUCTMODEL join PRODUCTMODEL_PRODUCTSERIE on 
                                PRODUCTMODEL_PRODUCTSERIE.PRODUCTSERIE_OID = CURRENT_PS.OID
                                and PRODUCTMODEL.OID = PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID) loop
        insert into PRODUCTMODEL_PRODUCTSERIE values (
               models.PRODUCTMODEL_OID, out_OID
        );                
    end loop;
    for taglines in (select * from PRODUCTSERIE_PRODUCTTAGLINE where 
                                PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = CURRENT_PS.OID and PRODUCTSERIE_PRODUCTTAGLINE.LASTVERSION = 1) loop
        INSERT INTO WEBCMS.PRODUCTSERIE_PRODUCTTAGLINE (
            OID, STATUS, PRODUCTSERIE_OID, 
            PRODUCTTAGLINE_OID, WORKSESSION_OID, ORIGINAL_PRODUCTSERIE2PRODUCT, 
            LASTVERSION) 
        VALUES ( PRODUCTSERIE_PRODUCTTAG_SEQ .NEXTVAL, taglines.STATUS, out_OID,
            taglines.PRODUCTTAGLINE_OID, in_workSessionOID, null,
            1);            
    end loop;
    for techspecs in (select * from PRODUCTSERIE_PRODUCTTECHSPECGR where 
                                PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = CURRENT_PS.OID) loop
            INSERT INTO PRODUCTSERIE_PRODUCTTECHSPECGR VALUES (
                out_OID,techspecs.PRODUCTTECHSPECGROUPINSTANCE_O
            );
    end loop;
    for resources in (select * from PRODUCTSERIE_RESOURCE where 
                                PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = CURRENT_PS.OID and PRODUCTSERIE_RESOURCE.LASTVERSION = 1) loop
            INSERT INTO WEBCMS.PRODUCTSERIE_RESOURCE (
                OID, STATUS, LASTVERSION, 
                PRODUCTSERIE_OID, RESOURCE_OID, ORIGINAL_PRODUCTSERIE2RESOURCE, 
                WORKSESSION_OID, POSITION) 
            VALUES ( PRODUCTSERIE_RESOURCE_SEQ.NEXTVAL, resources.STATUS, 1,
                out_OID, resources.RESOURCE_OID, null,
                in_workSessionOID, resources.POSITION);
    end loop;
    
    update PRODUCTSERIE set PRODUCTSERIE.LASTVERSION = 0 where PRODUCTSERIE.OID = CURRENT_PS.OID;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END COPYPRODUCTSERIE;


PROCEDURE COPYPRODUCTMODEL(in_OID IN NUMBER, in_withCommit IN NUMBER, in_workSessionOID IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PM PRODUCTMODEL%ROWTYPE;
    currentPRICEOID NUMBER(10);
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PM from PRODUCTMODEL where PRODUCTMODEL.OID = in_OID;
    select PRODUCTMODEL_SEQ.NEXTVAL into out_OID from DUAL;
    
    INSERT INTO WEBCMS.PRODUCTMODEL (
            OID, STATUS, DESCRIPTION, 
            NAME, POSITION, PARTNUMBER, 
            WORKSESSION_OID, LASTVERSION, ORIGINAL_PRODUCTMODEL_OID, 
            CUSTOMDESCRIPTION, FROMETILIZE, ONLINEDATE, 
            OFFLINEDATE,SOMETHINGCHANGED) 
    VALUES ( 
            out_OID, 3, CURRENT_PM.DESCRIPTION,
            CURRENT_PM.NAME, CURRENT_PM.POSITION, CURRENT_PM.PARTNUMBER,
            in_workSessionOID, 1, CURRENT_PM.OID,
            null, CURRENT_PM.FROMETILIZE, CURRENT_PM.ONLINEDATE,
            CURRENT_PM.OFFLINEDATE,1);
    if (CURRENT_PM.FROMETILIZE = 1) then
        for etilize in (select * from PRODUCTMODELETILIZE where PRODUCTMODELETILIZE.PRODUCTMODEL_OID = CURRENT_PM.OID) loop
            insert into PRODUCTMODELETILIZE values (
                out_OID, etilize.languageisocode, etilize.countryisocode, etilize.categoryid, etilize.etilizeid
            );
        end loop;
    end if;
    
    for prices in (select "PRICE".* from "PRICE" join PRODUCTMODEL_PRICE on "PRICE".OID = PRODUCTMODEL_PRICE.PRICE_OID and PRODUCTMODEL_PRICE.PRODUCTMODEL_OID = CURRENT_PM.OID) loop
        select PRICE_SEQ.nextval into currentPRICEOID from dual;
        INSERT INTO WEBCMS."PRICE" (
                OID, "VALUE", VALIDFROM, 
                VATINCLUDED, "TYPE", CURRENCY, 
                CURRENCYSYMBOL) 
        VALUES ( 
                currentPRICEOID, prices."VALUE", prices.VALIDFROM,
                prices.VATINCLUDED, prices."TYPE", prices.CURRENCY,
                prices.CURRENCYSYMBOL
        );
        INSERT INTO PRODUCTMODEL_PRICE VALUES (
                out_OID, currentPRICEOID
        );
    end loop;
    /*for filters in (select * from PRODUCTMODELFILTERVALUE where PRODUCTMODELFILTERVALUE.PRODUCTMODEL_OID = CURRENT_PM.OID) loop
        INSERT INTO WEBCMS.PRODUCTMODELFILTERVALUE (
                PRODUCTMODEL_OID, PRODUCTFILTER_OID, VALUE, 
                LOCALVALUE) 
        VALUES ( 
                out_OID, filters.PRODUCTFILTER_OID, filters.VALUE,
                filters.LOCALVALUE);
    end loop;*/
    for series in (select * from PRODUCTMODEL_PRODUCTSERIE where PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID = CURRENT_PM.OID) loop
        insert into PRODUCTMODEL_PRODUCTSERIE values (
               out_OID, series.PRODUCTSERIE_OID
        );         
        IN__PRODUCTSERIEISCHANGED(series.PRODUCTSERIE_OID);       
    end loop;
    for taglines in (select * from PRODUCTMODEL_PRODUCTTAGLINE where 
                                PRODUCTMODEL_PRODUCTTAGLINE.PRODUCTMODEL_OID = CURRENT_PM.OID and PRODUCTMODEL_PRODUCTTAGLINE.LASTVERSION = 1) loop
        INSERT INTO WEBCMS.PRODUCTMODEL_PRODUCTTAGLINE (
            OID, STATUS, PRODUCTMODEL_OID, 
            PRODUCTTAGLINE_OID, WORKSESSION_OID, ORIGINAL_PRODUCTMODEL2PRODUCT, 
            LASTVERSION) 
        VALUES ( PRODUCTMODEL_PRODUCTTAG_SEQ .NEXTVAL, taglines.status, out_OID,
            taglines.PRODUCTTAGLINE_OID, in_workSessionOID, null,
            1);            
    end loop;
    for techspecs in (select * from PRODUCTMODEL_PRODUCTTECHSPECGR where 
                                PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTMODEL_OID = CURRENT_PM.OID) loop
            INSERT INTO PRODUCTMODEL_PRODUCTTECHSPECGR VALUES (
                out_OID,techspecs.PRODUCTTECHSPECGROUPINSTANCE_O
            );
    end loop;
    for resources in (select * from PRODUCTMODEL_RESOURCE where 
                                PRODUCTMODEL_RESOURCE.PRODUCTMODEL_OID = CURRENT_PM.OID and PRODUCTMODEL_RESOURCE.LASTVERSION = 1) loop
            INSERT INTO WEBCMS.PRODUCTMODEL_RESOURCE (
                OID, STATUS, LASTVERSION, 
                PRODUCTMODEL_OID, RESOURCE_OID, ORIGINAL_PRODUCTMODEL2RESOURCE, 
                POSITION) 
            VALUES ( PRODUCTMODEL_RESOURCE_SEQ.NEXTVAL, resources.status, 1,
                out_OID, resources.RESOURCE_OID, null,
                resources.POSITION);
    end loop;
    
    update PRODUCTMODEL set PRODUCTMODEL.LASTVERSION = 0 where PRODUCTMODEL.OID = CURRENT_PM.OID;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END COPYPRODUCTMODEL;


PROCEDURE APPROVEPRODUCTSERIE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PS PRODUCTSERIE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PS from PRODUCTSERIE where PRODUCTSERIE.OID = in_OID;
    
    if( CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID is null) then
        update PRODUCTSERIE set
            PRODUCTSERIE.LASTVERSION = 1,
            PRODUCTSERIE.SOMETHINGCHANGED = ISCHANGED_PRODUCTSERIE (in_OID),
            PRODUCTSERIE.STATUS = decode(CURRENT_PS.STATUS,10,4,11,4,1)
        where PRODUCTSERIE.OID = CURRENT_PS.OID;
        
        out_OID := CURRENT_PS.OID;
    else
        update PRODUCTSERIE set
            PRODUCTSERIE.DESCRIPTION = CURRENT_PS.DESCRIPTION,
            PRODUCTSERIE.FOOTNOTES = CURRENT_PS.FOOTNOTES,
            PRODUCTSERIE.HASMSSOFTWARE = CURRENT_PS.HASMSSOFTWARE, 
            PRODUCTSERIE.LASTVERSION = 1,
            PRODUCTSERIE.MASTERNAME = CURRENT_PS.MASTERNAME,
            PRODUCTSERIE.NAME = CURRENT_PS.NAME,
            PRODUCTSERIE.OFFLINEDATE = CURRENT_PS.OFFLINEDATE,
            PRODUCTSERIE.ONLINEDATE = CURRENT_PS.ONLINEDATE,
            PRODUCTSERIE.ORIGINAL_PRODUCTSERIE_OID = null,
            PRODUCTSERIE.POSITION = CURRENT_PS.POSITION,
            PRODUCTSERIE.SOMETHINGCHANGED = ISCHANGED_PRODUCTSERIE (in_OID),
            PRODUCTSERIE.STATUS = decode(CURRENT_PS.STATUS,10,4,11,4,1),
            PRODUCTSERIE.STOREURL = CURRENT_PS.STOREURL,
            PRODUCTSERIE.WORKSESSION_OID = CURRENT_PS.WORKSESSION_OID,   
            PRODUCTSERIE.SMALLDESCRIPTION = CURRENT_PS.SMALLDESCRIPTION,
            PRODUCTSERIE.PROJECTCODE = CURRENT_PS.PROJECTCODE,
            PRODUCTSERIE.WARRANTY = CURRENT_PS.WARRANTY
        where PRODUCTSERIE.OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        
        delete from PRODUCTSERIE_PRODUCTBENEFIT where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        update PRODUCTSERIE_PRODUCTBENEFIT set 
            PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID
        where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = CURRENT_PS.OID;
    
        delete from PRODUCTMODEL_PRODUCTSERIE where PRODUCTMODEL_PRODUCTSERIE.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        update PRODUCTMODEL_PRODUCTSERIE set
            PRODUCTMODEL_PRODUCTSERIE.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID
        where PRODUCTMODEL_PRODUCTSERIE.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        delete from PRODUCTSERIE_PRODUCTTAGLINE where PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        update PRODUCTSERIE_PRODUCTTAGLINE set
            PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID
        where PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        delete from PRODUCTSERIE_PRODUCTTECHSPECGR where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        update PRODUCTSERIE_PRODUCTTECHSPECGR set
            PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID
        where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        delete from PRODUCTSERIE_RESOURCE where PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        update PRODUCTSERIE_RESOURCE set
            PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID
        where PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        delete from PRODUCTSERIE where PRODUCTSERIE.OID = CURRENT_PS.OID;
        
        out_OID := CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID; 
        
    end if;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTSERIE;


PROCEDURE APPROVEPRODUCTMODEL(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PM PRODUCTMODEL%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PM from PRODUCTMODEL where PRODUCTMODEL.OID = in_OID;
    
    if( CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID is null ) then
        update PRODUCTMODEL set
            PRODUCTMODEL.LASTVERSION = 1,
            PRODUCTMODEL.STATUS = decode(CURRENT_PM.STATUS,10,4,11,4,1),
            PRODUCTMODEL.SOMETHINGCHANGED = ISCHANGED_PRODUCTMODEL (in_OID)
        where PRODUCTMODEL.OID = CURRENT_PM.OID;
        
        IN__PRODUCTMODELISCHANGED(CURRENT_PM.OID);
        
        out_OID := CURRENT_PM.OID;
    else
        update PRODUCTMODEL set
            PRODUCTMODEL.CUSTOMDESCRIPTION = CURRENT_PM.CUSTOMDESCRIPTION,
            PRODUCTMODEL.DESCRIPTION = CURRENT_PM.DESCRIPTION,
            PRODUCTMODEL.FROMETILIZE = CURRENT_PM.FROMETILIZE,
            PRODUCTMODEL.LASTVERSION = 1,
            PRODUCTMODEL.NAME = CURRENT_PM.NAME,
            PRODUCTMODEL.OFFLINEDATE = CURRENT_PM.OFFLINEDATE,
            PRODUCTMODEL.ONLINEDATE = CURRENT_PM.ONLINEDATE,
            PRODUCTMODEL.ORIGINAL_PRODUCTMODEL_OID = null,
            PRODUCTMODEL.POSITION = CURRENT_PM.POSITION,
            PRODUCTMODEL.STATUS = decode(CURRENT_PM.STATUS,10,4,11,4,1),
            PRODUCTMODEL.WORKSESSION_OID = CURRENT_PM.WORKSESSION_OID
        where PRODUCTMODEL.OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        
        delete from PRODUCTMODELETILIZE where PRODUCTMODELETILIZE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        update PRODUCTMODELETILIZE set 
            PRODUCTMODELETILIZE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID
        where PRODUCTMODELETILIZE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODEL_PRODUCTSERIE where PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        update PRODUCTMODEL_PRODUCTSERIE set
            PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID
        where PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODEL_PRODUCTTAGLINE where PRODUCTMODEL_PRODUCTTAGLINE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        update PRODUCTMODEL_PRODUCTTAGLINE set
            PRODUCTMODEL_PRODUCTTAGLINE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID
        where PRODUCTMODEL_PRODUCTTAGLINE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODEL_PRODUCTTECHSPECGR where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        update PRODUCTMODEL_PRODUCTTECHSPECGR set
            PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID
        where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODEL_RESOURCE where PRODUCTMODEL_RESOURCE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        update PRODUCTMODEL_RESOURCE set
            PRODUCTMODEL_RESOURCE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID
        where PRODUCTMODEL_RESOURCE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        update PRODUCTMODEL_PRICE set 
            PRODUCTMODEL_PRICE.PRODUCTMODEL_OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID
        where PRODUCTMODEL_PRICE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODEL where PRODUCTMODEL.OID = CURRENT_PM.OID;
        
        IN__PRODUCTMODELISCHANGED(CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID);
        
        out_OID := CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID; 
        
    end if;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTMODEL;


PROCEDURE ROLLBACKPRODUCTSERIE2RESOURCE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PSR PRODUCTSERIE_RESOURCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PSR from PRODUCTSERIE_RESOURCE where PRODUCTSERIE_RESOURCE.OID = in_OID;
    
    if( CURRENT_PSR.ORIGINAL_PRODUCTSERIE2RESOURCE is null ) then
        out_OID := CURRENT_PSR.OID;
    else
        delete from PRODUCTSERIE_RESOURCE where PRODUCTSERIE_RESOURCE.OID = CURRENT_PSR.OID;
        
        update PRODUCTSERIE_RESOURCE set
            PRODUCTSERIE_RESOURCE.LASTVERSION = 1
        where PRODUCTSERIE_RESOURCE.OID = CURRENT_PSR.ORIGINAL_PRODUCTSERIE2RESOURCE;
        
        out_OID := CURRENT_PSR.ORIGINAL_PRODUCTSERIE2RESOURCE; 
        
    end if;
    
    IN__PRODUCTSERIEISCHANGED (CURRENT_PSR.PRODUCTSERIE_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTSERIE2RESOURCE;


PROCEDURE ROLLBACKPRODUCTSERIE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PS PRODUCTSERIE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PS from PRODUCTSERIE where PRODUCTSERIE.OID = in_OID;
    
    if( CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID is null ) then
        
        IN__PRODUCTSERIEISCHANGED(CURRENT_PS.OID);
    
        out_OID := CURRENT_PS.OID;
    else
        delete from PRODUCTMODEL_PRODUCTSERIE where PRODUCTMODEL_PRODUCTSERIE.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        delete from PRODUCTSERIE_PRODUCTTAGLINE where PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        for ts in (select * from PRODUCTSERIE_PRODUCTTECHSPECGR where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = CURRENT_PS.OID) loop
            delete from PRODUCTSERIE_PRODUCTTECHSPECGR where 
                PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = ts.PRODUCTSERIE_OID and
                PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = ts.PRODUCTTECHSPECGROUPINSTANCE_O;
            begin
                delete from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = ts.PRODUCTTECHSPECGROUPINSTANCE_O;
            exception when others then
                null;
            end;
        end loop;
        
        delete from PRODUCTSERIE_RESOURCE where PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = CURRENT_PS.OID;
        
        for ts in (select * from PRODUCTSERIE_PRODUCTBENEFIT where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = CURRENT_PS.OID) loop
            delete from PRODUCTSERIE_PRODUCTBENEFIT where 
                PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = ts.PRODUCTSERIE_OID and
                PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = ts.PRODUCTBENEFIT_OID;
            begin
                delete from PRODUCTBENEFIT where PRODUCTBENEFIT.OID = ts.PRODUCTBENEFIT_OID;
            exception when others then
                null;
            end;
        end loop;
        
        delete from PRODUCTSERIE where PRODUCTSERIE.OID = CURRENT_PS.OID;
        
        update PRODUCTSERIE set 
            PRODUCTSERIE.LASTVERSION = 1
        where PRODUCTSERIE.OID = CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        
        IN__PRODUCTSERIEISCHANGED(CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID);
        
        out_OID := CURRENT_PS.ORIGINAL_PRODUCTSERIE_OID;
        
    end if;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTSERIE;


PROCEDURE ROLLBACKPRODUCTMODEL(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PM PRODUCTMODEL%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PM from PRODUCTMODEL where PRODUCTMODEL.OID = in_OID;
    
    if( CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID is null ) then
        
        IN__PRODUCTMODELISCHANGED(CURRENT_PM.OID);
    
        out_OID := CURRENT_PM.OID;
    else
        delete from PRODUCTMODEL_PRODUCTSERIE where PRODUCTMODEL_PRODUCTSERIE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODEL_PRODUCTTAGLINE where PRODUCTMODEL_PRODUCTTAGLINE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        for ts in (select * from PRODUCTMODEL_PRODUCTTECHSPECGR where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTMODEL_OID = CURRENT_PM.OID) loop
            delete from PRODUCTMODEL_PRODUCTTECHSPECGR where 
                PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTMODEL_OID = ts.PRODUCTMODEL_OID and
                PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = ts.PRODUCTTECHSPECGROUPINSTANCE_O;
            begin
                delete from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = ts.PRODUCTTECHSPECGROUPINSTANCE_O;
            exception when others then
                null;
            end;
        end loop;
        
        delete from PRODUCTMODEL_RESOURCE where PRODUCTMODEL_RESOURCE.PRODUCTMODEL_OID = CURRENT_PM.OID;
        
        delete from PRODUCTMODELETILIZE where PRODUCTMODELETILIZE.PRODUCTMODEL_OID =  CURRENT_PM.OID;
        
        delete from PRODUCTMODEL where PRODUCTMODEL.OID = CURRENT_PM.OID;
        
        update PRODUCTMODEL set 
            PRODUCTMODEL.LASTVERSION = 1
        where PRODUCTMODEL.OID = CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        
        IN__PRODUCTMODELISCHANGED(CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID);
        
        out_OID := CURRENT_PM.ORIGINAL_PRODUCTMODEL_OID;
        
    end if;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTMODEL;


PROCEDURE APPROVEPRODUCTSERIE2RESOURCE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PSR PRODUCTSERIE_RESOURCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PSR from PRODUCTSERIE_RESOURCE where PRODUCTSERIE_RESOURCE.OID = in_OID;
    
    if( CURRENT_PSR.ORIGINAL_PRODUCTSERIE2RESOURCE is null ) then
        update PRODUCTSERIE_RESOURCE set
            PRODUCTSERIE_RESOURCE.LASTVERSION = 1,
            PRODUCTSERIE_RESOURCE.STATUS = decode(CURRENT_PSR.STATUS,10,4,11,4,1)
        where PRODUCTSERIE_RESOURCE.OID = CURRENT_PSR.OID;
        
        out_OID := CURRENT_PSR.OID;
    else
        update PRODUCTSERIE_RESOURCE set
            PRODUCTSERIE_RESOURCE.LASTVERSION = 1,
            PRODUCTSERIE_RESOURCE.ORIGINAL_PRODUCTSERIE2RESOURCE = null,
            PRODUCTSERIE_RESOURCE.POSITION = CURRENT_PSR.POSITION,
            PRODUCTSERIE_RESOURCE.STATUS = decode(CURRENT_PSR.STATUS,10,4,11,4,1) 
        where PRODUCTSERIE_RESOURCE.OID = CURRENT_PSR.ORIGINAL_PRODUCTSERIE2RESOURCE;
        
        delete from PRODUCTSERIE_RESOURCE where PRODUCTSERIE_RESOURCE.OID = CURRENT_PSR.OID;
        
        out_OID := CURRENT_PSR.ORIGINAL_PRODUCTSERIE2RESOURCE; 
        
    end if;
    
    IN__PRODUCTSERIEISCHANGED(CURRENT_PSR.PRODUCTSERIE_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTSERIE2RESOURCE;


PROCEDURE APPROVEPRODUCTMODEL2RESOURCE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PMR PRODUCTMODEL_RESOURCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PMR from PRODUCTMODEL_RESOURCE where PRODUCTMODEL_RESOURCE.OID = in_OID;
    
    if( CURRENT_PMR.ORIGINAL_PRODUCTMODEL2RESOURCE is null ) then
        update PRODUCTMODEL_RESOURCE set
            PRODUCTMODEL_RESOURCE.LASTVERSION = 1,
            PRODUCTMODEL_RESOURCE.STATUS = decode(CURRENT_PMR.STATUS,10,4,11,4,1)
        where PRODUCTMODEL_RESOURCE.OID = CURRENT_PMR.OID;
        
        out_OID := CURRENT_PMR.OID;
    else
        update PRODUCTMODEL_RESOURCE set
            PRODUCTMODEL_RESOURCE.LASTVERSION = 1,
            PRODUCTMODEL_RESOURCE.ORIGINAL_PRODUCTMODEL2RESOURCE = null,
            PRODUCTMODEL_RESOURCE.POSITION = CURRENT_PMR.POSITION,
            PRODUCTMODEL_RESOURCE.STATUS = decode(CURRENT_PMR.STATUS,10,4,11,4,1) 
        where PRODUCTMODEL_RESOURCE.OID = CURRENT_PMR.ORIGINAL_PRODUCTMODEL2RESOURCE;
        
        delete from PRODUCTMODEL_RESOURCE where PRODUCTMODEL_RESOURCE.OID = CURRENT_PMR.OID;
        
        out_OID := CURRENT_PMR.ORIGINAL_PRODUCTMODEL2RESOURCE; 
        
    end if;
    
    IN__PRODUCTMODELISCHANGED(CURRENT_PMR.PRODUCTMODEL_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTMODEL2RESOURCE;


PROCEDURE ROLLBACKPRODUCTMODEL2RESOURCE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PMR PRODUCTMODEL_RESOURCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PMR from PRODUCTMODEL_RESOURCE where PRODUCTMODEL_RESOURCE.OID = in_OID;
    
    if( CURRENT_PMR.ORIGINAL_PRODUCTMODEL2RESOURCE is null ) then
        out_OID := CURRENT_PMR.OID;
    else
        delete from PRODUCTMODEL_RESOURCE where PRODUCTMODEL_RESOURCE.OID = CURRENT_PMR.OID;
        
        update PRODUCTMODEL_RESOURCE set
            PRODUCTMODEL_RESOURCE.LASTVERSION = 1
        where PRODUCTMODEL_RESOURCE.OID = CURRENT_PMR.ORIGINAL_PRODUCTMODEL2RESOURCE;
        
        out_OID := CURRENT_PMR.ORIGINAL_PRODUCTMODEL2RESOURCE; 
        
    end if;
    
    IN__PRODUCTMODELISCHANGED (CURRENT_PMR.PRODUCTMODEL_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTMODEL2RESOURCE;


PROCEDURE APPROVEPRODUCTMODEL2TAGLINE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PMT PRODUCTMODEL_PRODUCTTAGLINE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PMT from PRODUCTMODEL_PRODUCTTAGLINE where PRODUCTMODEL_PRODUCTTAGLINE.OID = in_OID;
    
    if( CURRENT_PMT.ORIGINAL_PRODUCTMODEL2PRODUCT is null ) then
        update PRODUCTMODEL_PRODUCTTAGLINE set
            PRODUCTMODEL_PRODUCTTAGLINE.LASTVERSION = 1,
            PRODUCTMODEL_PRODUCTTAGLINE.STATUS = decode(CURRENT_PMT.STATUS,10,4,11,4,1)
        where PRODUCTMODEL_PRODUCTTAGLINE.OID = CURRENT_PMT.OID;
        
        out_OID := CURRENT_PMT.OID;
    else
        update PRODUCTMODEL_PRODUCTTAGLINE set
            PRODUCTMODEL_PRODUCTTAGLINE.LASTVERSION = 1,
            PRODUCTMODEL_PRODUCTTAGLINE.ORIGINAL_PRODUCTMODEL2PRODUCT = null,
            PRODUCTMODEL_PRODUCTTAGLINE.PRODUCTTAGLINE_OID = CURRENT_PMT.PRODUCTTAGLINE_OID,
            PRODUCTMODEL_PRODUCTTAGLINE.STATUS =  decode(CURRENT_PMT.STATUS,10,4,11,4,1),
            PRODUCTMODEL_PRODUCTTAGLINE.WORKSESSION_OID = CURRENT_PMT.WORKSESSION_OID
        where PRODUCTMODEL_PRODUCTTAGLINE.OID = CURRENT_PMT.ORIGINAL_PRODUCTMODEL2PRODUCT;
        
        delete from PRODUCTMODEL_PRODUCTTAGLINE where PRODUCTMODEL_PRODUCTTAGLINE.OID = CURRENT_PMT.OID;
        
        out_OID := CURRENT_PMT.ORIGINAL_PRODUCTMODEL2PRODUCT; 
        
    end if;
    
    IN__PRODUCTMODELISCHANGED (CURRENT_PMT.PRODUCTMODEL_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTMODEL2TAGLINE;


PROCEDURE APPROVEPRODUCTSERIE2TAGLINE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PST PRODUCTSERIE_PRODUCTTAGLINE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PST from PRODUCTSERIE_PRODUCTTAGLINE where PRODUCTSERIE_PRODUCTTAGLINE.OID = in_OID;
    
    if( CURRENT_PST.ORIGINAL_PRODUCTSERIE2PRODUCT is null ) then
        update PRODUCTSERIE_PRODUCTTAGLINE set
            PRODUCTSERIE_PRODUCTTAGLINE.LASTVERSION = 1,
            PRODUCTSERIE_PRODUCTTAGLINE.STATUS = decode(CURRENT_PST.STATUS,10,4,11,4,1)
        where PRODUCTSERIE_PRODUCTTAGLINE.OID = CURRENT_PST.OID;
        
        out_OID := CURRENT_PST.OID;
    else
        update PRODUCTSERIE_PRODUCTTAGLINE set
            PRODUCTSERIE_PRODUCTTAGLINE.LASTVERSION = 1,
            PRODUCTSERIE_PRODUCTTAGLINE.ORIGINAL_PRODUCTSERIE2PRODUCT = null,
            PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTTAGLINE_OID = CURRENT_PST.PRODUCTTAGLINE_OID,
            PRODUCTSERIE_PRODUCTTAGLINE.STATUS =  decode(CURRENT_PST.STATUS,10,4,11,4,1),
            PRODUCTSERIE_PRODUCTTAGLINE.WORKSESSION_OID = CURRENT_PST.WORKSESSION_OID
        where PRODUCTSERIE_PRODUCTTAGLINE.OID = CURRENT_PST.ORIGINAL_PRODUCTSERIE2PRODUCT;
        
        delete from PRODUCTSERIE_PRODUCTTAGLINE where PRODUCTSERIE_PRODUCTTAGLINE.OID = CURRENT_PST.OID;
        
        out_OID := CURRENT_PST.ORIGINAL_PRODUCTSERIE2PRODUCT; 
        
    end if;
    
    IN__PRODUCTSERIEISCHANGED (CURRENT_PST.PRODUCTSERIE_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTSERIE2TAGLINE;


PROCEDURE ROLLBACKPRODUCTSERIE2TAGLINE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PST PRODUCTSERIE_PRODUCTTAGLINE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PST from PRODUCTSERIE_PRODUCTTAGLINE where PRODUCTSERIE_PRODUCTTAGLINE.OID = in_OID;
    
    if( CURRENT_PST.ORIGINAL_PRODUCTSERIE2PRODUCT is null ) then
        out_OID := CURRENT_PST.OID;
    else
        delete from PRODUCTSERIE_PRODUCTTAGLINE where PRODUCTSERIE_PRODUCTTAGLINE.OID = CURRENT_PST.OID;
        
        update PRODUCTSERIE_PRODUCTTAGLINE set
            PRODUCTSERIE_PRODUCTTAGLINE.LASTVERSION = 1
        where PRODUCTSERIE_PRODUCTTAGLINE.OID = CURRENT_PST.ORIGINAL_PRODUCTSERIE2PRODUCT;
        
        out_OID := CURRENT_PST.ORIGINAL_PRODUCTSERIE2PRODUCT; 
        
    end if;
    
    IN__PRODUCTSERIEISCHANGED(CURRENT_PST.PRODUCTSERIE_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTSERIE2TAGLINE;


PROCEDURE ROLLBACKPRODUCTMODEL2TAGLINE(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PMT PRODUCTMODEL_PRODUCTTAGLINE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PMT from PRODUCTMODEL_PRODUCTTAGLINE where PRODUCTMODEL_PRODUCTTAGLINE.OID = in_OID;
    
    if( CURRENT_PMT.ORIGINAL_PRODUCTMODEL2PRODUCT is null ) then
        out_OID := CURRENT_PMT.OID;
    else
        delete from PRODUCTMODEL_PRODUCTTAGLINE where PRODUCTMODEL_PRODUCTTAGLINE.OID = CURRENT_PMT.OID;
        
        update PRODUCTMODEL_PRODUCTTAGLINE set
            PRODUCTMODEL_PRODUCTTAGLINE.LASTVERSION = 1
        where PRODUCTMODEL_PRODUCTTAGLINE.OID = CURRENT_PMT.ORIGINAL_PRODUCTMODEL2PRODUCT;
        
        out_OID := CURRENT_PMT.ORIGINAL_PRODUCTMODEL2PRODUCT; 
        
    end if;
    
    IN__PRODUCTMODELISCHANGED(CURRENT_PMT.PRODUCTMODEL_OID);
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTMODEL2TAGLINE;


PROCEDURE APPROVEPRODUCTSERIE2TECHSPEC(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PTS PRODUCTTECHSPECGROUPINSTANCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PTS from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = in_OID;
    
    if( CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI is null ) then
        update PRODUCTTECHSPECGROUPINSTANCE set
            PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1,
            PRODUCTTECHSPECGROUPINSTANCE.STATUS = decode(CURRENT_PTS.STATUS,10,4,11,4,1)
        where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.OID;
        
        out_OID := CURRENT_PTS.OID;
    else
        update PRODUCTTECHSPECGROUPINSTANCE set
            PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1,
            PRODUCTTECHSPECGROUPINSTANCE.STATUS = decode(CURRENT_PTS.STATUS,10,4,11,4,1) ,
            PRODUCTTECHSPECGROUPINSTANCE.ORIGINAL_PRODUCTTECHSPECGROUPI = null,
            PRODUCTTECHSPECGROUPINSTANCE.WORKSESSION_OID = CURRENT_PTS.WORKSESSION_OID,
            PRODUCTTECHSPECGROUPINSTANCE.VALUE = CURRENT_PTS.VALUE
        where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
        
        begin
            update PRODUCTSERIE_PRODUCTTECHSPECGR set 
                PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O =  CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI
            where  PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.OID;
        exception when others then
            null;
        end;
        
        delete from PRODUCTSERIE_PRODUCTTECHSPECGR where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.OID;
        
        delete from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.OID;
        
        out_OID := CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
    end if;
    
    for models in (select * from PRODUCTSERIE_PRODUCTTECHSPECGR where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI) loop
        IN__PRODUCTSERIEISCHANGED(models.PRODUCTSERIE_OID);
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTSERIE2TECHSPEC;


PROCEDURE APPROVEPRODUCTMODEL2TECHSPEC(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PTS PRODUCTTECHSPECGROUPINSTANCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PTS from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = in_OID;
    
    if( CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI is null ) then
        update PRODUCTTECHSPECGROUPINSTANCE set
            PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1,
            PRODUCTTECHSPECGROUPINSTANCE.STATUS = decode(CURRENT_PTS.STATUS,10,4,11,4,1)
        where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.OID;
        
        out_OID := CURRENT_PTS.OID;
    else
        update PRODUCTTECHSPECGROUPINSTANCE set
            PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1,
            PRODUCTTECHSPECGROUPINSTANCE.STATUS = decode(CURRENT_PTS.STATUS,10,4,11,4,1) ,
            PRODUCTTECHSPECGROUPINSTANCE.ORIGINAL_PRODUCTTECHSPECGROUPI = null,
            PRODUCTTECHSPECGROUPINSTANCE.WORKSESSION_OID = CURRENT_PTS.WORKSESSION_OID,
            PRODUCTTECHSPECGROUPINSTANCE.VALUE = CURRENT_PTS.VALUE
        where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
        
        begin
            update PRODUCTMODEL_PRODUCTTECHSPECGR set 
                PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O =  CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI
            where  PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.OID;
        exception when others then
            null;
        end;
        
        delete from PRODUCTMODEL_PRODUCTTECHSPECGR where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.OID;
        
        delete from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.OID;
        
        out_OID := CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
    end if;
    
    for models in (select * from PRODUCTMODEL_PRODUCTTECHSPECGR where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI) loop
        IN__PRODUCTMODELISCHANGED(models.PRODUCTMODEL_OID);
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTMODEL2TECHSPEC;


PROCEDURE ROLLBACKPRODUCTSERIE2TECHSPEC(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PTS PRODUCTTECHSPECGROUPINSTANCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PTS from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = in_OID;
    
    if( CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI is null ) then
        out_OID := CURRENT_PTS.OID;
    else
    
        delete from PRODUCTSERIE_PRODUCTTECHSPECGR where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.OID;
        
        delete from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.OID;
        
        update PRODUCTTECHSPECGROUPINSTANCE set
            PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1
        where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
        
        out_OID := CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
    end if;
    
    for models in (select * from PRODUCTSERIE_PRODUCTTECHSPECGR where PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI) loop
        IN__PRODUCTSERIEISCHANGED (models.PRODUCTSERIE_OID);
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTSERIE2TECHSPEC;


PROCEDURE ROLLBACKPRODUCTMODEL2TECHSPEC(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PTS PRODUCTTECHSPECGROUPINSTANCE%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PTS from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = in_OID;
    
    if( CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI is null ) then
        out_OID := CURRENT_PTS.OID;
    else
    
        delete from PRODUCTMODEL_PRODUCTTECHSPECGR where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.OID;
        
        delete from PRODUCTTECHSPECGROUPINSTANCE where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.OID;
        
        update PRODUCTTECHSPECGROUPINSTANCE set
            PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1
        where PRODUCTTECHSPECGROUPINSTANCE.OID = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
        
        out_OID := CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI;
    end if;
    
    for models in (select * from PRODUCTMODEL_PRODUCTTECHSPECGR where PRODUCTMODEL_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O = CURRENT_PTS.ORIGINAL_PRODUCTTECHSPECGROUPI) loop
        IN__PRODUCTMODELISCHANGED (models.PRODUCTMODEL_OID);
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTMODEL2TECHSPEC;


PROCEDURE APPROVEPRODUCTBENEFIT(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PB PRODUCTBENEFIT%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PB from PRODUCTBENEFIT where PRODUCTBENEFIT.OID = in_OID;
    
    if( CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID is null ) then
        update PRODUCTBENEFIT set
            PRODUCTBENEFIT.LASTVERSION = 1,
            PRODUCTBENEFIT.STATUS = decode(CURRENT_PB.STATUS,10,4,11,4,1)
        where PRODUCTBENEFIT.OID = CURRENT_PB.OID;
        
        out_OID := CURRENT_PB.OID;
    else
        update PRODUCTBENEFIT set
            PRODUCTBENEFIT.DESCRIPTION =  CURRENT_PB.DESCRIPTION,
            PRODUCTBENEFIT.IMAGE = CURRENT_PB.IMAGE,
            PRODUCTBENEFIT.LASTVERSION = 1,
            PRODUCTBENEFIT.ORIGINAL_PRODUCTBENEFIT_OID = null,
            PRODUCTBENEFIT.POSITION = CURRENT_PB.POSITION,
            PRODUCTBENEFIT.STATUS = decode(CURRENT_PB.STATUS,10,4,11,4,1) ,
            PRODUCTBENEFIT.TITLE = CURRENT_PB.TITLE,
            PRODUCTBENEFIT.WORKSESSION_OID = CURRENT_PB.WORKSESSION_OID
        where PRODUCTBENEFIT.OID = CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID;
        
        begin
            update PRODUCTSERIE_PRODUCTBENEFIT set 
                PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID =  CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID
            where  PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = CURRENT_PB.OID;
        exception when others then
            null;
        end;
        
        delete from PRODUCTSERIE_PRODUCTBENEFIT where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = CURRENT_PB.OID;
        
        delete from PRODUCTBENEFIT where PRODUCTBENEFIT.OID = CURRENT_PB.OID;
        
        out_OID := CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID;
    end if;
    
    for series in (select * from PRODUCTSERIE_PRODUCTBENEFIT where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID) loop
        IN__PRODUCTSERIEISCHANGED(series.PRODUCTSERIE_OID);
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END APPROVEPRODUCTBENEFIT;


PROCEDURE ROLLBACKPRODUCTBENEFIT(in_OID IN NUMBER, in_withCommit IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    CURRENT_PB PRODUCTBENEFIT%ROWTYPE;
    
    MYEXCEPTION EXCEPTION;
BEGIN
    out_OID := null;
    out_status := 0;
    select * into CURRENT_PB from PRODUCTBENEFIT where PRODUCTBENEFIT.OID = in_OID;
    
    if( CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID is null ) then
        out_OID := CURRENT_PB.OID;
    else
    
        delete from PRODUCTSERIE_PRODUCTBENEFIT where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = CURRENT_PB.OID;
        
        delete from PRODUCTBENEFIT where PRODUCTBENEFIT.OID = CURRENT_PB.OID;
        
        update PRODUCTBENEFIT set
            PRODUCTBENEFIT.LASTVERSION = 1
        where PRODUCTBENEFIT.OID = CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID;
        
        out_OID := CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID;
    end if;
    
    for series in (select * from PRODUCTSERIE_PRODUCTBENEFIT where PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = CURRENT_PB.ORIGINAL_PRODUCTBENEFIT_OID) loop
        IN__PRODUCTSERIEISCHANGED (series.PRODUCTSERIE_OID);
    end loop;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END ROLLBACKPRODUCTBENEFIT;


PROCEDURE CLONEPRODUCTSERIE(in_OID IN NUMBER, in_fromCLABOID IN NUMBER, in_toCLABOID IN NUMBER, in_withCommit IN NUMBER, in_workSessionOID IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    FROM_PRODUCTSERIE PRODUCTSERIE%ROWTYPE;
    
    LOCAL_PRODUCTLINEOID INTEGER(10);
    TEMP_OID INTEGER(10);
    
    MYEXCEPTION EXCEPTION;
BEGIN

    select * into FROM_PRODUCTSERIE from PRODUCTSERIE where PRODUCTSERIE.OID = in_OID;
    out_OID := GET_LOCALPRODUCTSERIE (FROM_PRODUCTSERIE.OID, in_toCLABOID);
    LOCAL_PRODUCTLINEOID := GET_LOCALPRODUCTLINE(FROM_PRODUCTSERIE.PRODUCTLINE_OID, in_toCLABOID);
    
    if(LOCAL_PRODUCTLINEOID is null) then
        CLONEPRODUCTLINE(FROM_PRODUCTSERIE.PRODUCTLINE_OID, in_toCLABOID, 0, in_workSessionOID, LOCAL_PRODUCTLINEOID, TEMP_OID);
        if (LOCAL_PRODUCTLINEOID is null) then
            RAISE MYEXCEPTION;
        end if;
    end if;
    
    if (out_OID is null) then
        select PRODUCTSERIE_SEQ.NEXTVAL into out_OID from DUAL;
        INSERT INTO WEBCMS.PRODUCTSERIE (
            OID, STATUS, POSITION, 
            NAME, DESCRIPTION, HASMSSOFTWARE, 
            STOREURL, PRODUCTLINE_OID, MASTER_PRODUCTSERIE_OID, 
            WORKSESSION_OID, LASTVERSION, ISMASTER, 
            SOMETHINGCHANGED, ORIGINAL_PRODUCTSERIE_OID, FOOTNOTES, 
            MASTERNAME, ONLINEDATE, OFFLINEDATE, 
            SMALLDESCRIPTION, PROJECTCODE, WARRANTY) 
        VALUES ( 
            out_OID, 2, FROM_PRODUCTSERIE.POSITION,
            FROM_PRODUCTSERIE.NAME, FROM_PRODUCTSERIE.DESCRIPTION, FROM_PRODUCTSERIE.HASMSSOFTWARE,
            FROM_PRODUCTSERIE.STOREURL, LOCAL_PRODUCTLINEOID, FROM_PRODUCTSERIE.OID,
            in_workSessionOID, 1, 0, 
            1, null, FROM_PRODUCTSERIE.FOOTNOTES,
            FROM_PRODUCTSERIE.MASTERNAME, FROM_PRODUCTSERIE.ONLINEDATE, FROM_PRODUCTSERIE.OFFLINEDATE,
            FROM_PRODUCTSERIE.SMALLDESCRIPTION, FROM_PRODUCTSERIE.PROJECTCODE, FROM_PRODUCTSERIE.WARRANTY); 
        
        for benefits in (select * from PRODUCTBENEFIT join PRODUCTSERIE_PRODUCTBENEFIT on 
                                PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = FROM_PRODUCTSERIE.OID
                                and PRODUCTBENEFIT.OID = PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID and PRODUCTBENEFIT.STATUS = 1) loop
            SELECT PRODUCTBENEFIT_SEQ.NEXTVAL into TEMP_OID from dual;
            INSERT INTO PRODUCTBENEFIT (
                    OID, STATUS, POSITION, 
                    TITLE, IMAGE, DESCRIPTION, 
                    WORKSESSION_OID, LASTVERSION, ISMASTER, 
                    ORIGINAL_PRODUCTBENEFIT_OID, MASTER_PRODUCTBENEFIT_OID) 
            VALUES ( 
                    TEMP_OID, 2, benefits.POSITION,
                    benefits.TITLE, benefits.IMAGE, benefits.DESCRIPTION,
                    in_workSessionOID, 1, 0,
                    null, benefits.OID
                );
            INSERT INTO PRODUCTSERIE_PRODUCTBENEFIT VALUES (
                    out_OID, TEMP_OID
             );          
        end loop;
        for taglines in (select * from PRODUCTSERIE_PRODUCTTAGLINE where 
                                PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = FROM_PRODUCTSERIE.OID and PRODUCTSERIE_PRODUCTTAGLINE.STATUS = 1) loop
            INSERT INTO WEBCMS.PRODUCTSERIE_PRODUCTTAGLINE (
                OID, STATUS, PRODUCTSERIE_OID, 
                PRODUCTTAGLINE_OID, WORKSESSION_OID, ORIGINAL_PRODUCTSERIE2PRODUCT, 
                LASTVERSION) 
            VALUES ( PRODUCTSERIE_PRODUCTTAG_SEQ .NEXTVAL, 2, out_OID,
                taglines.PRODUCTTAGLINE_OID, in_workSessionOID, null,
                1);            
        end loop;
        for resources in (select * from PRODUCTSERIE_RESOURCE where 
                                PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = FROM_PRODUCTSERIE.OID and PRODUCTSERIE_RESOURCE.STATUS = 1) loop
            INSERT INTO WEBCMS.PRODUCTSERIE_RESOURCE (
                OID, STATUS, LASTVERSION, 
                PRODUCTSERIE_OID, RESOURCE_OID, ORIGINAL_PRODUCTSERIE2RESOURCE, 
                WORKSESSION_OID, POSITION) 
            VALUES ( PRODUCTSERIE_RESOURCE_SEQ.NEXTVAL, 2, 1,
                out_OID, resources.RESOURCE_OID, null,
                in_workSessionOID, resources.POSITION);
        end loop;
    else
        for benefits in (select PRODUCTBENEFIT.* from PRODUCTBENEFIT join PRODUCTSERIE_PRODUCTBENEFIT 
                on PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = FROM_PRODUCTSERIE.OID 
                and PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = PRODUCTBENEFIT.OID 
                and PRODUCTBENEFIT.STATUS = 1) loop
            if (GET_LOCALPRODUCTBENEFIT (benefits.OID, in_toCLABOID) is null) then
                SELECT PRODUCTBENEFIT_SEQ.NEXTVAL into TEMP_OID from dual;
                INSERT INTO PRODUCTBENEFIT (
                    OID, STATUS, POSITION, 
                    TITLE, IMAGE, DESCRIPTION, 
                    WORKSESSION_OID, LASTVERSION, ISMASTER, 
                    ORIGINAL_PRODUCTBENEFIT_OID, MASTER_PRODUCTBENEFIT_OID) 
                VALUES ( 
                    TEMP_OID, 2, benefits.POSITION,
                    benefits.TITLE, benefits.IMAGE, benefits.DESCRIPTION,
                    in_workSessionOID, 1, 0,
                    null, benefits.OID
                );
                INSERT INTO PRODUCTSERIE_PRODUCTBENEFIT VALUES (
                    out_OID, TEMP_OID
                );
            end if;
        end loop;
        for resources in (select PRODUCTSERIE_RESOURCE.* from PRODUCTSERIE_RESOURCE
                where  PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = FROM_PRODUCTSERIE.OID 
                and PRODUCTSERIE_RESOURCE.STATUS = 1) loop
            if (GET_LOCALPRODUCTSERIE2RESOURCE (resources.OID, in_toCLABOID) is null) then
                SELECT PRODUCTSERIE_RESOURCE_SEQ.NEXTVAL into TEMP_OID from dual;
                INSERT INTO WEBCMS.PRODUCTSERIE_RESOURCE (
                    OID, STATUS, LASTVERSION, 
                    PRODUCTSERIE_OID, RESOURCE_OID, ORIGINAL_PRODUCTSERIE2RESOURCE, 
                    WORKSESSION_OID, POSITION) 
                VALUES (
                    TEMP_OID, 2, 1,
                    out_OID, resources.RESOURCE_OID, null,
                    in_workSessionOID, resources.POSITION
                );
            end if;
        end loop;
        for taglines in (select PRODUCTSERIE_PRODUCTTAGLINE.* from PRODUCTSERIE_PRODUCTTAGLINE
                where  PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = FROM_PRODUCTSERIE.OID 
                and PRODUCTSERIE_PRODUCTTAGLINE.STATUS = 1) loop
            if (GET_LOCALPRODUCTSERIE2TAGLINE (taglines.OID, in_toCLABOID) is null) then
                SELECT PRODUCTSERIE_PRODUCTTAG_SEQ.NEXTVAL into TEMP_OID from dual;
                INSERT INTO WEBCMS.PRODUCTSERIE_PRODUCTTAGLINE (
                   OID, STATUS, PRODUCTSERIE_OID, 
                   PRODUCTTAGLINE_OID, WORKSESSION_OID, ORIGINAL_PRODUCTSERIE2PRODUCT, 
                   LASTVERSION) 
                VALUES (
                    TEMP_OID, 2, out_OID,
                    taglines.PRODUCTTAGLINE_OID, in_workSessionOID, null,
                    1
                );
            end if;
        end loop;
    end if;
    
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END CLONEPRODUCTSERIE;


PROCEDURE DUPLICATEPRODUCTSERIE(in_fromOID IN NUMBER, in_toOID IN NUMBER, in_withCommit IN NUMBER, in_workSessionOID IN NUMBER, out_OID OUT NUMBER, out_status OUT NUMBER) AS
    TEMP_OID INTEGER(10);
BEGIN
    out_OID := in_toOID;
    out_status := 0;
    for benefits in (select PRODUCTBENEFIT.* from PRODUCTBENEFIT join PRODUCTSERIE_PRODUCTBENEFIT 
                on PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTSERIE_OID = in_fromOID
                and PRODUCTSERIE_PRODUCTBENEFIT.PRODUCTBENEFIT_OID = PRODUCTBENEFIT.OID 
                and PRODUCTBENEFIT.LASTVERSION = 1) loop
        SELECT PRODUCTBENEFIT_SEQ.NEXTVAL into TEMP_OID from dual;
        INSERT INTO PRODUCTBENEFIT (
                OID, STATUS, POSITION, 
                TITLE, IMAGE, DESCRIPTION, 
                WORKSESSION_OID, LASTVERSION, ISMASTER, 
                ORIGINAL_PRODUCTBENEFIT_OID, MASTER_PRODUCTBENEFIT_OID) 
        VALUES ( 
                TEMP_OID, 2, benefits.POSITION,
                benefits.TITLE, benefits.IMAGE, benefits.DESCRIPTION,
                in_workSessionOID, 1, 0,
                null, benefits.OID
        );
        INSERT INTO PRODUCTSERIE_PRODUCTBENEFIT VALUES (
                out_OID, TEMP_OID
        );
    end loop;
    for resources in (select PRODUCTSERIE_RESOURCE.* from PRODUCTSERIE_RESOURCE
                where  PRODUCTSERIE_RESOURCE.PRODUCTSERIE_OID = in_fromOID
                and PRODUCTSERIE_RESOURCE.LASTVERSION = 1) loop
            SELECT PRODUCTSERIE_RESOURCE_SEQ.NEXTVAL into TEMP_OID from dual;
            INSERT INTO WEBCMS.PRODUCTSERIE_RESOURCE (
                    OID, STATUS, LASTVERSION, 
                    PRODUCTSERIE_OID, RESOURCE_OID, ORIGINAL_PRODUCTSERIE2RESOURCE, 
                    WORKSESSION_OID, POSITION) 
            VALUES (
                    TEMP_OID, 2, 1,
                    out_OID, resources.RESOURCE_OID, null,
                    in_workSessionOID, resources.POSITION
            );
    end loop;
    for taglines in (select PRODUCTSERIE_PRODUCTTAGLINE.* from PRODUCTSERIE_PRODUCTTAGLINE
                where  PRODUCTSERIE_PRODUCTTAGLINE.PRODUCTSERIE_OID = in_fromOID
                and PRODUCTSERIE_PRODUCTTAGLINE.LASTVERSION = 1) loop
            SELECT PRODUCTSERIE_PRODUCTTAG_SEQ.NEXTVAL into TEMP_OID from dual;
            INSERT INTO WEBCMS.PRODUCTSERIE_PRODUCTTAGLINE (
                   OID, STATUS, PRODUCTSERIE_OID, 
                   PRODUCTTAGLINE_OID, WORKSESSION_OID, ORIGINAL_PRODUCTSERIE2PRODUCT, 
                   LASTVERSION) 
            VALUES (
                    TEMP_OID, 2, out_OID,
                    taglines.PRODUCTTAGLINE_OID, in_workSessionOID, null,
                    1
            );
    end loop;
    for techspecs in (select PRODUCTTECHSPECGROUPINSTANCE.* from PRODUCTSERIE_PRODUCTTECHSPECGR
                join PRODUCTTECHSPECGROUPINSTANCE on 
                PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTSERIE_OID = in_fromOID
                and PRODUCTTECHSPECGROUPINSTANCE.OID = PRODUCTSERIE_PRODUCTTECHSPECGR.PRODUCTTECHSPECGROUPINSTANCE_O
                and PRODUCTTECHSPECGROUPINSTANCE.LASTVERSION = 1) loop
            SELECT PRODUCTTECHSPECGROUPINSTANCE_S.NEXTVAL into TEMP_OID from dual;
            INSERT INTO WEBCMS.PRODUCTTECHSPECGROUPINSTANCE (
                OID, STATUS, PRODUCTTECHSPECGROUP_OID, 
                PARENT_PRODTECHSPECGROUPINST_O, WORKSESSION_OID, VALUE, 
                LASTVERSION, ORIGINAL_PRODUCTTECHSPECGROUPI) 
            VALUES (
                TEMP_OID, 2, techspecs.PRODUCTTECHSPECGROUP_OID,
                techspecs.PARENT_PRODTECHSPECGROUPINST_O, in_workSessionOID, techspecs.VALUE,
                1, null
            );
            insert into PRODUCTSERIE_PRODUCTTECHSPECGR VALUES (
                out_OID, TEMP_OID
            );
    end loop;
    if (in_withCommit = 1) then
        COMMIT;
    end if;
EXCEPTION when others THEN
    ROLLBACK;
    out_OID := null;
    out_status := -1;
END DUPLICATEPRODUCTSERIE;

END PRODUCT;
/
